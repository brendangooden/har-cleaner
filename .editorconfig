root = true

[*.cs]
trim_trailing_whitespace = true
insert_final_newline = true
end_of_line = lf

[*]
indent_style = tab
indent_size = 4

[*.cshtml]
indent_style = tab
indent_size = 4
end_of_line = lf

[*.{fs,fsx,yml}]
indent_style = space
indent_size = 4
end_of_line = lf

[*.{md,markdown,json,js,csproj,fsproj,targets,targets,props}]
indent_style = space
indent_size = 2
end_of_line = lf

# Dotnet code style settings:
[*.{cs,vb}]

# langugage conventions https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference#language-conventions

# Organize usings
dotnet_separate_import_directive_groups = false
dotnet_sort_system_directives_first = true

# this. and Me. preferences
dotnet_style_qualification_for_event = false:error
dotnet_style_qualification_for_field = false:error
dotnet_style_qualification_for_method = false:error
dotnet_style_qualification_for_property = false:error

# Language keywords vs BCL types preferences
dotnet_style_predefined_type_for_locals_parameters_members = true:error
dotnet_style_predefined_type_for_member_access = true:error

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:silent

# Modifier preferences
dotnet_style_require_accessibility_modifiers = for_non_interface_members:error
dotnet_style_readonly_field = true:error

# Expression-level preferences
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_explicit_tuple_names = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_auto_properties = true:silent
dotnet_style_prefer_conditional_expression_over_assignment = true:silent
dotnet_style_prefer_conditional_expression_over_return = true:silent

# C# Code Style Rules
[*.cs]

# var preferences
csharp_style_var_for_built_in_types = false:silent
csharp_style_var_when_type_is_apparent = false:silent
csharp_style_var_elsewhere = false:silent

# Expression-bodied members
csharp_style_expression_bodied_methods = false:silent
csharp_style_expression_bodied_constructors = false:silent
csharp_style_expression_bodied_operators = false:silent
csharp_style_expression_bodied_properties = true:silent
csharp_style_expression_bodied_indexers = true:silent
csharp_style_expression_bodied_accessors = true:silent

# Pattern matching preferences
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion

# Null-checking preferences
csharp_style_throw_expression = true:suggestion
csharp_style_conditional_delegate_call = true:suggestion

# Modifier preferences
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:suggestion

# Expression-level preferences
csharp_prefer_braces = true:error
csharp_style_deconstructed_variable_declaration = true:suggestion
csharp_prefer_simple_using_statement = true:suggestion
csharp_style_pattern_local_over_anonymous_function = true:suggestion
csharp_style_inlined_variable_declaration = true:suggestion

# C# Formatting Rules
# New line preferences
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = flush_left

# Space preferences
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = false
csharp_space_before_open_square_brackets = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_square_brackets = false

# Wrapping preferences
csharp_preserve_single_line_statements = true
csharp_preserve_single_line_blocks = true

# Naming conventions
[*.{cs,vb}]

# Naming rules
dotnet_naming_rule.interface_should_be_prefixed_with_i.severity = error
dotnet_naming_rule.interface_should_be_prefixed_with_i.symbols = interface
dotnet_naming_rule.interface_should_be_prefixed_with_i.style = prefixed_with_i

dotnet_naming_rule.types_should_be_pascal_case.severity = error
dotnet_naming_rule.types_should_be_pascal_case.symbols = types
dotnet_naming_rule.types_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.non_field_members_should_be_pascal_case.severity = error
dotnet_naming_rule.non_field_members_should_be_pascal_case.symbols = non_field_members
dotnet_naming_rule.non_field_members_should_be_pascal_case.style = pascal_case

# Symbol specifications
dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.interface.required_modifiers =

dotnet_naming_symbols.types.applicable_kinds = class, struct, interface, enum
dotnet_naming_symbols.types.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.types.required_modifiers =

dotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method
dotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.non_field_members.required_modifiers =

# Naming styles
dotnet_naming_style.pascal_case.required_prefix =
dotnet_naming_style.pascal_case.required_suffix =
dotnet_naming_style.pascal_case.word_separator =
dotnet_naming_style.pascal_case.capitalization = pascal_case

dotnet_naming_style.prefixed_with_i.required_prefix = I
dotnet_naming_style.prefixed_with_i.required_suffix =
dotnet_naming_style.prefixed_with_i.word_separator =
dotnet_naming_style.prefixed_with_i.capitalization = pascal_case

# Code analysis rules
dotnet_analyzer_diagnostic.category-security.severity = error
dotnet_analyzer_diagnostic.category-performance.severity = warning
dotnet_analyzer_diagnostic.category-reliability.severity = error
dotnet_analyzer_diagnostic.category-maintainability.severity = warning

# Disable some noisy rules
dotnet_diagnostic.CA1014.severity = none  # Mark assemblies with CLSCompliant
dotnet_diagnostic.CA1040.severity = none  # Avoid empty interfaces
dotnet_diagnostic.CA1062.severity = none  # Validate arguments of public methods (too noisy)
dotnet_diagnostic.CA1303.severity = none  # Do not pass literals as localized parameters
dotnet_diagnostic.CA2007.severity = none  # Consider calling ConfigureAwait on the awaited task
dotnet_diagnostic.CA1515.severity = none  # Make types internal (not applicable for console apps)
dotnet_diagnostic.CA1056.severity = none  # URI properties should not be strings (too strict for our use case)
dotnet_diagnostic.CA1002.severity = none  # Do not expose generic lists (models need to be serializable)
dotnet_diagnostic.CA2227.severity = none  # Collection properties should be read only (models need setters)
dotnet_diagnostic.CA1819.severity = none  # Properties should not return arrays (needed for command line parsing)
dotnet_diagnostic.CA1308.severity = none  # Use ToUpperInvariant instead of ToLowerInvariant (preference)
dotnet_diagnostic.CA1307.severity = none  # Specify StringComparison (will be noisy to fix everywhere)
dotnet_diagnostic.CA1304.severity = none  # Specify culture for ToUpper/ToLower (too strict for simple operations)
dotnet_diagnostic.CA1311.severity = none  # Specify culture for formatting (too strict)
dotnet_diagnostic.CA1031.severity = none  # Do not catch general exception types (sometimes needed)
dotnet_diagnostic.CA1822.severity = suggestion  # Mark members as static (good suggestion but not error)
dotnet_diagnostic.CA1845.severity = suggestion  # Use Span instead of Substring (good but not critical)
dotnet_diagnostic.CA1862.severity = suggestion  # Use StringComparison overloads (good but not critical)
dotnet_diagnostic.CA1869.severity = suggestion  # Cache JsonSerializerOptions (good suggestion)
dotnet_diagnostic.CA1852.severity = suggestion  # Seal classes (good suggestion but not error)

# Meziantou rules adjustments
dotnet_diagnostic.MA0002.severity = suggestion  # Use IEqualityComparer parameter (good suggestion)
dotnet_diagnostic.MA0004.severity = suggestion  # Use ConfigureAwait(false) (good but not always needed)
dotnet_diagnostic.MA0011.severity = suggestion  # Use IFormatProvider parameter (good suggestion)
dotnet_diagnostic.MA0016.severity = suggestion  # Use collection abstraction (good suggestion but not critical)
dotnet_diagnostic.MA0020.severity = suggestion  # Use Find instead of FirstOrDefault (good suggestion)
dotnet_diagnostic.MA0048.severity = none  # File name must match type name (not applicable for our model files)
dotnet_diagnostic.MA0051.severity = suggestion  # Method is too long (good suggestion but not error)
dotnet_diagnostic.MA0089.severity = suggestion  # Use char instead of string (good suggestion)

# SonarAnalyzer adjustments
dotnet_diagnostic.S1066.severity = suggestion  # Merge if statements (good suggestion)
dotnet_diagnostic.S1871.severity = suggestion  # Merge identical branches (good suggestion)
dotnet_diagnostic.S2325.severity = suggestion  # Make methods static (good suggestion)
dotnet_diagnostic.S3267.severity = suggestion  # Use LINQ Where method (good suggestion)
dotnet_diagnostic.S6602.severity = suggestion  # Use Find instead of FirstOrDefault (good suggestion)
dotnet_diagnostic.S6605.severity = suggestion  # Use collection-specific methods (good suggestion)

# Roslynator adjustments
dotnet_diagnostic.RCS1155.severity = suggestion  # Use StringComparison (good suggestion)
dotnet_diagnostic.CA1861.severity = suggestion  # Prefer static readonly fields over constant array arguments (good suggestion)
dotnet_diagnostic.CA1707.severity = none  # Identifiers should not contain underscores (not our naming convention)
dotnet_diagnostic.CA1054.severity = none  # Uri parameters should not be strings (too strict for our use case)
dotnet_diagnostic.CA1305.severity = none  # Unused parameter (can be ignored in some cases)
dotnet_diagnostic.S4487.severity = none  # Unused parameter (can be ignored in some cases)
dotnet_diagnostic.IDE1006.severity = none  # Unused parameter (can be ignored in some cases)
dotnet_diagnostic.S125.severity = suggestion # Remove commented code